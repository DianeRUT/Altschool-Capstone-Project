{"ast":null,"code":"export const apiLogin=async(email,password)=>{try{const response=await fetch('http://localhost:5000/api/auth/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});const data=await response.json();if(response.ok){return{success:true,token:data.token,user:data.user};}else{return{success:false,message:data.msg||'Login failed'};}}catch(error){return{success:false,message:'Error logging in'};}};export const apiSignup=async(name,email,password,role)=>{try{const response=await fetch('http://localhost:5000/api/auth/register',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,email,password,role})});const data=await response.json();if(response.ok){return{success:true,token:data.token};}else{return{success:false,message:data.msg||'Signup failed'};}}catch(error){return{success:false,message:'Network error'};}};// Fetch user's profile information\nexport const apiGetProfile=async()=>{const token=localStorage.getItem('authToken');try{const response=await fetch('http://localhost:5000/api/auth/profile',{method:'GET',headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'}});const data=await response.json();if(response.ok){return{success:true,data:data.profile};}else{return{success:false,message:data.msg||'Failed to fetch profile'};}}catch(error){return{success:false,message:'Network error'};}};// Update user's profile information\nexport const apiUpdateProfile=async updatedProfile=>{const token=localStorage.getItem('authToken');try{const response=await fetch('http://localhost:5000/api/auth/profile',{method:'PUT',headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'},body:JSON.stringify(updatedProfile)});const data=await response.json();if(response.ok){return{success:true,data:data.profile};}else{return{success:false,message:data.msg||'Failed to update profile'};}}catch(error){return{success:false,message:'Network error'};}};","map":{"version":3,"names":["apiLogin","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","success","token","user","message","msg","error","apiSignup","name","role","apiGetProfile","localStorage","getItem","profile","apiUpdateProfile","updatedProfile"],"sources":["C:/Users/fsindamb/OneDrive/Desktop/Diane_stuffs/Capstone Altschool Project/eventful-frontend/src/services/apiService.js"],"sourcesContent":["export const apiLogin = async (email, password) => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/auth/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return { success: true, token: data.token, user: data.user };\r\n    } else {\r\n      return { success: false, message: data.msg || 'Login failed' };\r\n    }\r\n  } catch (error) {\r\n    return { success: false, message: 'Error logging in' };\r\n  }\r\n};\r\n\r\nexport const apiSignup = async (name, email, password, role) => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/auth/register', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ name, email, password, role }),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return { success: true, token: data.token };\r\n    } else {\r\n      return { success: false, message: data.msg || 'Signup failed' };\r\n    }\r\n  } catch (error) {\r\n    return { success: false, message: 'Network error' };\r\n  }\r\n};\r\n // Fetch user's profile information\r\nexport const apiGetProfile = async () => {\r\n  const token = localStorage.getItem('authToken');\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/auth/profile', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return { success: true, data: data.profile };\r\n    } else {\r\n      return { success: false, message: data.msg || 'Failed to fetch profile' };\r\n    }\r\n  } catch (error) {\r\n    return { success: false, message: 'Network error' };\r\n  }\r\n};\r\n\r\n// Update user's profile information\r\nexport const apiUpdateProfile = async (updatedProfile) => {\r\n  const token = localStorage.getItem('authToken');\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/auth/profile', {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(updatedProfile),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return { success: true, data: data.profile };\r\n    } else {\r\n      return { success: false, message: data.msg || 'Failed to update profile' };\r\n    }\r\n  } catch (error) {\r\n    return { success: false, message: 'Network error' };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}