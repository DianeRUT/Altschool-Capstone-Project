{"ast":null,"code":"export const apiLogin = async (email, password) => {\n  try {\n    const response = await fetch('http://localhost:5000/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      return {\n        success: true,\n        token: data.token,\n        user: data.user\n      };\n    } else {\n      return {\n        success: false,\n        message: data.msg || 'Login failed'\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Error logging in'\n    };\n  }\n};\nexport const apiSignup = async (name, email, password, role) => {\n  try {\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password,\n        role\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      return {\n        success: true,\n        token: data.token\n      };\n    } else {\n      return {\n        success: false,\n        message: data.msg || 'Signup failed'\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Network error'\n    };\n  }\n};\n// Fetch user's profile information\nexport const apiGetProfile = async () => {\n  const token = localStorage.getItem('authToken');\n  try {\n    const response = await fetch(`${API_URL}/auth/profile`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    if (response.ok) {\n      return {\n        success: true,\n        data: data.profile\n      };\n    } else {\n      return {\n        success: false,\n        message: data.msg || 'Failed to fetch profile'\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Network error'\n    };\n  }\n};\n\n// Update user's profile information\nexport const apiUpdateProfile = async updatedProfile => {\n  const token = localStorage.getItem('authToken');\n  try {\n    const response = await fetch(`${API_URL}/auth/profile`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedProfile)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      return {\n        success: true,\n        data: data.profile\n      };\n    } else {\n      return {\n        success: false,\n        message: data.msg || 'Failed to update profile'\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      message: 'Network error'\n    };\n  }\n};","map":{"version":3,"names":["apiLogin","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","success","token","user","message","msg","error","apiSignup","name","role","API_URL","apiGetProfile","localStorage","getItem","profile","apiUpdateProfile","updatedProfile"],"sources":["C:/Users/fsindamb/OneDrive/Desktop/Diane_stuffs/Capstone Altschool Project/eventful-frontend/src/services/apiService.js"],"sourcesContent":["export const apiLogin = async (email, password) => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/auth/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return { success: true, token: data.token, user: data.user };\r\n    } else {\r\n      return { success: false, message: data.msg || 'Login failed' };\r\n    }\r\n  } catch (error) {\r\n    return { success: false, message: 'Error logging in' };\r\n  }\r\n};\r\n\r\nexport const apiSignup = async (name, email, password, role) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ name, email, password, role }),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return { success: true, token: data.token };\r\n    } else {\r\n      return { success: false, message: data.msg || 'Signup failed' };\r\n    }\r\n  } catch (error) {\r\n    return { success: false, message: 'Network error' };\r\n  }\r\n};\r\n // Fetch user's profile information\r\nexport const apiGetProfile = async () => {\r\n  const token = localStorage.getItem('authToken');\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/profile`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return { success: true, data: data.profile };\r\n    } else {\r\n      return { success: false, message: data.msg || 'Failed to fetch profile' };\r\n    }\r\n  } catch (error) {\r\n    return { success: false, message: 'Network error' };\r\n  }\r\n};\r\n\r\n// Update user's profile information\r\nexport const apiUpdateProfile = async (updatedProfile) => {\r\n  const token = localStorage.getItem('authToken');\r\n  try {\r\n    const response = await fetch(`${API_URL}/auth/profile`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(updatedProfile),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return { success: true, data: data.profile };\r\n    } else {\r\n      return { success: false, message: data.msg || 'Failed to update profile' };\r\n    }\r\n  } catch (error) {\r\n    return { success: false, message: 'Network error' };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}